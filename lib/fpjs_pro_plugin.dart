import 'dart:async';
import 'dart:convert';

import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/services.dart';
import 'package:fpjs_pro_plugin/error.dart';
import 'package:fpjs_pro_plugin/region.dart';
import 'package:fpjs_pro_plugin/result.dart';

// Update it on each release
const pluginVersion = '2.1.1';

/// A plugin that accesses native FingerprintJS Pro libraries to get a device identifier
class FpjsProPlugin {
  static const channelName = 'fpjs_pro_plugin';

  /// A channel used for communication with the native libraries
  static const MethodChannel _channel = MethodChannel(channelName);

  static var _isInitialized = false;
  static var _isExtendedResult = false;

  /// Initializes the native FingerprintJS Pro client
  static Future<void> initFpjs() async {
    await _channel.invokeMethod('init');
    _isInitialized = true;
  }

  /// Returns the visitorId generated by the native Fingerprint Pro client
  static Future<String?> getDeviceId() async {
    if (!_isInitialized) {
      throw Exception(
          'You need to initialize the FPJS Client first by calling the "initFpjs" method');
    }

    try {
      final String? visitorId = await _channel.invokeMethod('getDeviceId');
      print(visitorId);
      return visitorId;
    } on PlatformException catch (exception) {
      throw unwrapError(exception);
    }
  }

  /// Returns the visitor data generated by the native Fingerprint Pro client
  static Future<String?> getFingerprint() async {
    if (!_isInitialized) {
      throw Exception(
          'You need to initialize the FPJS Client first by calling the "initFpjs" method');
    }

    try {
      final fingerprint = await _channel.invokeMethod('getFingerprint');
      print(fingerprint);
      return fingerprint;
    } on PlatformException catch (exception) {
      throw unwrapError(exception);
    }
  }
}
